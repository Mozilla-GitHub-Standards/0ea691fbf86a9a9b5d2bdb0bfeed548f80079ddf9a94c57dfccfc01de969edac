#!/usr/bin/python
"""
    Script to report on disconnecting VPN clients
"""
import os
import sys
from argparse import ArgumentParser
import mozdef_client_config
sys.dont_write_bytecode = True


def main():
    """
        Print the config that should go to each client into a file.
        Return True on success, False upon failure.
        Side effect is that we write to the output_filename.
    """
    # We will push routes/configs to the configuration filename
    # we're given as the LAST argument in reality there's usually
    # only one arg, but, that's the spec.
    #parser = ArgumentParser(description='Args for client-disconnect')
    #parser.add_argument('--conf', type=str, required=True,
    #                    help='Config file',
    #                    dest='conffile', default=None)
    #parser.add_argument('output_filename', type=str,
    #                    help='Filename to push config to')
    #args = parser.parse_args()

    # common_name is an environmental variable passed in:
    # "The X509 common name of an authenticated client."
    # https://openvpn.net/index.php/open-source/documentation/manuals/65-openvpn-20x-manpage.html
    usercn = os.environ.get('common_name')
    trusted_ip = os.environ.get('trusted_ip')

    if not usercn:
        # alternately, "The username provided by a connecting client."
        usercn = os.environ.get('username')

    # Super failure in openvpn, or hacking, or an improper test from a human.
    if not usercn:
        print('No common_name or username environment variable provided.')
        return False
    elif not trusted_ip:
        print('No trusted_ip environment variable provided.')
        return False

    # Bundle up the data we're going to report.  Safe the values
    # in case any are missing.
    client_public_ip = trusted_ip
    client_port = os.environ.get('trusted_port', '')
    client_private_ip = os.environ.get('ifconfig_pool_remote_ip', '')
    # Reporting numbers
    time_duration = os.environ.get('time_duration', '')
    bytes_sent = os.environ.get('bytes_sent', '')
    bytes_received = os.environ.get('bytes_received', '')

    logger = mozdef_client_config.ConfigedMozDefEvent()
    # While 'Authorization' might seem more correct (we are layering
    # access upon a user after they have been authenticated), we are
    # asked to put all login-related info under the category of
    # 'Authentication'.  So, don't change this without an EIS consult.
    logger.category = 'Authentication'
    logger.source = 'openvpn'
    logger.tags = ['vpn', 'disconnect']

    logger.summary = ('SUCCESS: VPN disconnection for '
                      '{}'.format(usercn))
    logger.details = {'sourceipaddress': client_public_ip,
                      'sourceport': client_port,
                      'vpnip': client_private_ip,
                      'username': usercn,
                      'connectionduration': time_duration,
                      'bytessent': bytes_sent,
                      'bytesreceived': bytes_received,
                      'success': 'true'}
    logger.send()
    return True


if __name__ == '__main__':
    if main():
        sys.exit(0)
    else:
        sys.exit(1)
